#!/usr/bin/env ruby

require 'optparse'
require 'fileutils'

class UnrestrictDenyhosts
  def initialize
    @opts = {
      :working_dir => "/var/lib/denyhosts"
    }
  end

  def self.main
    self.new.run
  end

  def files_to_check
    [ "/etc/hosts.deny",
      "#{@opts[:working_dir]}/hosts",
      "#{@opts[:working_dir]}/hosts-restricted",
      "#{@opts[:working_dir]}/hosts-root",
      "#{@opts[:working_dir]}/hosts-valid",
      "#{@opts[:working_dir]}/user-hosts" ]
  end

  def remove_from_file file, ip
    return false unless File.exists? file
    lines = File.readlines(file)
    if lines.detect { |l| l =~ /#{ip}/ }
      bkp = "#{file}.#{Time.now.utc.strftime("%Y%m%d%H%M%S")}"
      puts "[unrestrict] #{ip} in file, Making backup copy of #{file} => #{bkp}"
      unless File.writable?(File.dirname(file)) && File.writable?(file)
        raise "[unrestrict] Error: sorry, you need permissions to both make a backup of and edit: #{file} (try re-running as root?)"
      end
      FileUtils.copy file, bkp
      lines = File.readlines(file)
      lines = lines.reject {|l| l=~ /#{ip}/ }
      File.open(file,"w") do |f|
        f.print lines.join("\n")
      end
    else
      puts "#{ip} not contained in #{file}"
    end
  end

  def parse_opts
    OptionParser.new do |opts|
      opts.banner = "Usage: #{$0} [options]"

      opts.on("-h", "--help") do 
        puts <<-EOH
       #{$0} [[opts]]
          see: http://denyhosts.sourceforge.net/faq.html#3_19 for more information on removing blocked hosts from denyhosts.

        -W DIR  --working-dir DIR   Set the denyhosts working directory, default is '#{@opts[:xnest_display]}'
        -w      --whitelist         Whitelist the ip (add to /etc/hosts.allow)
        EOH
        exit 0
      end
      opts.on("-W", "--working-dir DIR") do |env|
        @opts[:working_dir] = env
      end

      opts.on("-w", "--whitelist") do 
        @opts[:whitelist] = true
      end

    end.parse!
  end

  def set_as_allowed ip
    file = "#{@opts[:working_dir]}/allowed-hosts"
    if File.exists?(file) && File.readlines(file).detect {|l| l =~ /#{ip}/ }
      puts "[unrestrict] #{ip} already whitelisted"
    else
      File.open(file, File::WRONLY|File::APPEND|File::CREAT, 0666) do |f|
        f.puts ip
      end
    end
  end

  def run
    parse_opts
    ARGV.each do |ip|
      set_as_allowed(ip) if @opts[:whitelist]
      files_to_check.each do |file|
        remove_from_file file, ip
      end
    end
  end
end

UnrestrictDenyhosts.main
