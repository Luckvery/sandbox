#!/usr/bin/env ruby
# -*- ruby -*-
require 'rubygems'
require 'optparse'
require 'fileutils'
require 'base_app'

#
# new-clj-mvn proj-name
#

module Maven
  class NewApp < BaseApp
    def initialize
      super
      @properties = {
        "project.groupId"              => "*no-groupId*",
        "project.artifactId"           => "*no-artifactId*",
        "project.version"              => "*no-version*",
        "project.name"                 => "*no-name*",
        "project.description"          => "*no-description*",
        "project.url"                  => "*no-rul*",
        "project.year"                 => Time.now.year.to_s,
        "developer.id"                 => "*no-developer.id*",
        "developer.name"               => "*no.developer.name*",
        "developer.email"              => "*no-developer.email*",
        "issueManagement.sysem"        => "*no-issueManagement.sysem*",
        "issueManagement.url"          => "*no.issueManagement.url*",
      }

    end

    def load_properties_from_file file_name
      properties = {}
      lines = File.readlines(file_name)
      lines = lines.reject {|l| l =~ /^\s+#/ }
      lines.each do |line|
        line.chomp!
        line.gsub!(/#.+$/, '')
        key,val = line.split(/\s*=\s*/, 2)
        if !key.nil? && !key.empty?
          properties[key] = val
        end
      end
      properties
    end

    def load_props
      [ ENV['HOME'], "." ].each do |dir|
        file = "#{dir}/.clj.mvn.info"
        if File.exists? file
          @properties.merge! load_properties_from_file file
        end
      end

      @properties['project.testRunner.className'] ||= "#{@properties['project.groupId']}.#{@properties['project.artifactId']}.run-test"
      @properties['project.testRunner.fileName']  ||= "./#{@properties['project.testRunner.className'].split('.').join('/')}.clj"
    end

    def command_line_arguments
      super.concat [[ 'p', 'properties=s',       'Specify a properties file (yaml)'],
                    [ 'D', 'define-property=s',  'Define a property' ],
                    [ 'C', 'create-config',      'Create a default configuration file (.clj.mvn.info)' ],
                   ]
    end

    def define_property=(prop)
      key,val = prop.split '=', 2
      @properties[key] = val
    end

    def mvn_proj_dir_skeleton
      [
       [:gen_file_from_template, :mvn_pom,      './pom.xml'],
       "./src/main/clj/#{@properties['project.groupId'].split('.').join('/')}/#{@properties['project.artifactId'].gsub('-','_')}",
       [:gen_file_from_template, :main_clj,     "./src/main/clj/#{@properties['project.groupId'].split('.').join('/')}/#{@properties['project.artifactId']}/main.clj"],
       './bin',
       './src/main/clj',
       './src/main/emacs',
       './src/main/java/com',
       './src/main/resources',
       [:gen_file_from_template, :repl,               './src/main/sh/repl' ],
       [:gen_file_from_template, :runner,             './src/main/sh/runner.sh' ],
       [:gen_file_from_template, :log4j,              './src/main/resources/log4j.properties' ],
       [:gen_file_from_template, :swank_runner_clj,   './src/main/resources/swank-runner.clj' ],
       [:gen_file_from_template, :slime_incl_el,      './src/main/emacs/slime_incl.el' ],
       [:gen_file_from_template, :test_script_runner, './scripts/run_tests.clj'],
       [:gen_file_from_template, :clj_test_class,     "./src/test/clj/#{@properties['project.testRunner.fileName']}"],
       './src/main/sh',
       './src/test/clj',
       './src/test/resources',
      ]
    end

    def gen_file_from_template(template_name,target_file)
      dirname = File.dirname(target_file).gsub('-','_')
      create_directory dirname
      write_file target_file.gsub('-','_'), process_template(template_name,@properties)
    end

    def create_directory path
      FileUtils.mkdir_p path
    end

    def run
      load_props
      @properties['project.artifactId'] ||= project_name
      @properties['project.artifactId.className'] = @properties['project.artifactId'].gsub '-', '_'
      puts "Using Properties:"
      @properties.each do |prop,val|
        printf "  %30s = '%s'\n", prop, val
      end

      project_name = *ARGV

      unless project_name
        raise "Error: you must specify a project name"
      end

      if create_config
        File.open("./.clj.mvn.info","w") do |out|
          out.puts "# Default Configuration Created: #{Time.now.to_s}"
          @properties.each do |p,v|
            out.puts "#{p}=#{v}"
          end
        end
        return
      end

      if exists? project_name
        $stderr.puts "Error: project directory already exists: #{project_name}"
        exit -1
      end

      puts "Creating Project: #{project_name}"
      @properties['project.name'] = project_name

      unless exists? project_name
        mkdir project_name
      end

      Dir.chdir project_name

      mvn_proj_dir_skeleton.each do |entry|
        method = :create_directory
        args = [entry]
        if entry.is_a? Array
          method, *args = entry
        end
        puts "Calling: #{method}(#{args})"
        self.send method, *args
      end

    end
  end
end


Maven::NewApp.main

__END__
__MVN_POM__
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>{{project.groupId}}</groupId>
  <artifactId>{{project.artifactId}}</artifactId>
  <version>{{project.version}}</version>
  <packaging>jar</packaging>
  <name>{{project.name}}</name>
  <description>{{project.description}}</description>
  <url>{{project.url}}</url>
  <inceptionYear>{{project.year}}</inceptionYear>

  <developers>
    <developer>
      <id>{{developer.id}}</id>
      <name>{{developer.name}}</name>
      <email>{{developer.email}}</email>
    </developer>
  </developers>

  <issueManagement>
    <system>{{issueManagement.sysem}}</system>
    <url>{{issueManagement.url}}</url>
  </issueManagement>

  <repositories>
    <!-- Rejpository for swank-clojure (we still need our own clojure and contrib since they're customized). -->
    <repository>
      <id>clojars</id>
      <url>http://clojars.org/repo/</url>
    </repository>
  </repositories>


  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>cobertura-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>clean</id>
            <goals>
              <goal>clean</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>1.5</source>
          <target>1.5</target>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <configuration>
          <descriptorRefs>
            <descriptorRef>jar-with-dependencies</descriptorRef>
          </descriptorRefs>
        </configuration>
      </plugin>

      <plugin>
        <groupId>com.theoryinpractise</groupId>
        <artifactId>clojure-maven-plugin</artifactId>
        <version>1.1</version>
        <configuration>
          <sourceDirectories>
            <sourceDirectory>src/main/clj</sourceDirectory>
          </sourceDirectories>
          <testSourceDirectories>
            <testSourceDirectory>src/test/clj</testSourceDirectory>
          </testSourceDirectories>
          <testScript>scripts/run_tests.clj</testScript>
        </configuration>
        <executions>
          <execution>
            <id>clojure-test</id>
            <phase>test</phase>
            <goals>
              <goal>test</goal>
            </goals>
          </execution>
          <execution>
            <id>clojure-compile</id>
            <phase>compile</phase>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <id>Helper Scripts</id>
            <phase>generate-sources</phase>
            <configuration>
              <tasks>
                <property name="bin.dir" value="${project.build.directory}/../bin" />
                <property name="maven.runtime.classpath" refid="maven.runtime.classpath"  />
                <property name="maven.test.classpath" refid="maven.test.classpath"  />
                <property name="test.classpath" refid="maven.test.classpath"  />
                <property name="project.build.directory" value="${project.build.directory}"  />
                <property name="group.id" value="${project.groupId}"  />
                <property name="artifact.id" value="${project.artifactId}"  />
                <property name="version" value="${project.version}"  />
                <property name="basedir" value="${basedir}"  />
                <echo message="INSTALL-SCRIPTS" />
                <filter token="maven.runtime.classpath"
                        value="${maven.runtime.classpath}:${project.build.directory}/../src/main/clj" />
                <filter token="maven.test.classpath"
                        value="${maven.test.classpath}:${project.build.directory}/../src/main/clj" />
                <filter token="bin.dir" value="${bin.dir}" />
                <filter token="target.directory" value="${project.build.directory}" />
                <filter token="test.classpath" value="${test.classpath}" />
                <filter token="group.id" value="${group.id}" />
                <filter token="artifact.id" value="${artifact.id}" />
                <filter token="version" value="${version}" />
                <filter token="basedir" value="${basedir}" />
                <mkdir dir="${bin.dir}" />
                <copy file="${basedir}/src/main/sh/repl"             todir="${bin.dir}" filtering="on" overwrite="true" />
                <copy file="${basedir}/src/main/sh/runner.sh"        todir="${bin.dir}" filtering="on" overwrite="true" />
                <copy file="${basedir}/src/main/emacs/slime_incl.el" todir="${bin.dir}" filtering="on" overwrite="true" />
                <chmod dir="${bin.dir}" type="file" perm="0755" includes="repl,*.sh" verbose="true" />
              </tasks>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>

  <dependencies>
    <dependency>
      <groupId>org.clojure</groupId>
      <artifactId>clojure</artifactId>
      <version>1.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.clojure</groupId>
      <artifactId>clojure-contrib</artifactId>
      <version>1.0.0</version>
    </dependency>

    <dependency>
      <groupId>commons-math</groupId>
      <artifactId>commons-math</artifactId>
      <version>1.2</version>
    </dependency>
    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
      <version>1.2.14</version>
    </dependency>
    <dependency>
      <groupId>commons-logging</groupId>
      <artifactId>commons-logging</artifactId>
      <version>1.1.1</version>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <version>1.4</version>
    </dependency>

    <dependency>
      <groupId>org.clojure</groupId>
      <artifactId>swank-clojure</artifactId>
      <version>1.0</version>
    </dependency>

  </dependencies>

  <reporting>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>cobertura-maven-plugin</artifactId>
      </plugin>
    </plugins>
  </reporting>


</project>
__MVN_POM__
__LOG4J__
log4j.rootLogger=INFO, console, rolling

# Console logger
log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=[%-5p %d] %F:%L - %m%n

# File logger
log4j.appender.rolling=org.apache.log4j.RollingFileAppender
log4j.appender.rolling.File={{project.base.dir}}/log/application.log
log4j.appender.rolling.MaxFileSize=10MB
log4j.appender.rolling.MaxBackupIndex=100
log4j.appender.rolling.layout=org.apache.log4j.PatternLayout
log4j.appender.rolling.layout.ConversionPattern=[%-5p %d] %F:%L - %m%n
__LOG4J__
__SWANK_RUNNER_CLJ__
(require 'swank.swank)
(swank.swank/ignore-protocol-version "2009-08-19")
(swank.swank/start-server "/tmp/algoconnect-services.port" :encoding "iso-latin-1-unix" :port 4005)
__SWANK_RUNNER_CLJ__
__REPL__
---
perms: 755
---
CLASSPATH="@maven.test.classpath@:@basedir@/src/test/clj"

if [ -z "$JDWP_PORT" ]; then
  JDWP_PORT=8888
fi

java -server \
  -Xdebug \
  -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address="$JDWP_PORT" \
  -cp "$CLASSPATH" \
  clojure.lang.Repl \
  "$@"
__REPL__
__RUNNER__
JAR_WITH_DEP=@target.directory@/@maven.test.classpath@
CLASSPATH="$JAR_WITH_DEP"

java -server \
    -Xdebug \
    -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8886 \
    -cp "$CLASSPATH" \
    {{project.groupId}}.{{project.artifactId.className}}.main \
    "@target.directory@/classes/swank_runner.clj" \
    "$@"
__RUNNER__
__MAIN_CLJ__
(ns {{project.groupId}}.{{project.artifactId}}.main
  (:gen-class))

(defn -main [& args]
  (prn "This project is in need of a main indeed."))
__MAIN_CLJ__
__SLIME_INCL_EL__
(setq slime-lisp-implementations
      '(({{project.name}} ("@bin.dir@/repl")
                     :init swank-clojure-init
                     :init-function krb-swank-clojure-init)))
__SLIME_INCL_EL__
__TEST_SCRIPT_RUNNER__
(require '[{{project.groupId}}.{{project.artifactId}}.run-test :as tests])
(tests/-main [])
__TEST_SCRIPT_RUNNER__
__CLJ_TEST_CLASS__
 (ns {{project.groupId}}.{{project.artifactId}}.run-test
  (:use clojure.contrib.test.junit
        clojure.contrib.test-is)
  (:gen-class))

(def *all-tests*
  '())

(defn -main [& args]
  (apply run-tests *all-tests*))
__CLJ_TEST_CLASS__
